Script started on Sat 01 Apr 2017 07:48:31 PM EDT
amesasuarez@matrix:~/OOP345/Milestones/MS1> whoami
amesasuarez
amesasuarez@matrix:~/OOP345/Milestones/MS1> cat *.cpp

/* 
OOP345
Milestone # 1
Date     : 03/21/17
Author   : Alejandro Mesa
Student# : 038515151
Email    : amesasuarez@myseneca.ca 
*/

#include <iostream>
#include <fstream>
#include <string>
#include<vector>
using namespace std;

void trimSpaces(string& s) {
	//delete the first character if it is a space
	while (!s.empty() && s[0] == ' ')
		s.erase(0, 1);
	//delete the last character if it is a space
	while (!s.empty() && s[s.size() - 1] == ' ')
		s.erase(s.size() - 1, 1);
}

void printCsv(vector<vector<string>> &csvData) {
	for (auto row : csvData) {
		for (auto column : row) {
			cout << "< " << column << "> ";
		}
		cout << "\n";
	}
	for (size_t row = 0; row < csvData.size(); row++) {
		for (size_t column = 0; column < csvData[row].size(); column++) {
			cout << "[ " << csvData[row][column] << "] ";
		}
		cout << "\n";
	}
	for (auto row = csvData.begin(); row != csvData.end(); row++) {// < csvData.size; row++) {
		for (auto column = row->begin(); column != row->end(); column++) {// < csvData[row].size(); column++) {
			cout << "{ " << *column << "}";
		}
		cout << "\n";
	}
}

void csvRead(string& filename, char separator, vector<vector<string>> &csvData) {
	//vector<vector<string>> csvData;
	cout << "filename= " << filename << "\n";
	cout << "separator= " << separator << "\n";
	fstream is(filename, ios::in);
	if (!is.is_open()) {
		throw string("cannot open file '") + filename + "'";
	}
	//vector<string> fileds;
	string line;
	while (getline(is, line)) {
		auto cr = line.find('\r');
		if (cr != string::npos)
			line.erase(cr);
		//cout << line << "\n";
		vector<string> fields;
		string field;
		size_t index = 0;
		int fieldCount = 0;
		while (index < line.size()) {
			while (index < line.size() && line[index] != separator) {
				field += line[index];
				index++;
			}
			index++;
			//cout << "field = '" << field << "\n";
			fieldCount++;
			trimSpaces(field);
			fields.push_back(move(field));
			//field.clear();
			//cout << "index=" << index << "\n";
		}
		/*for (auto e : fields) {
		cout << "[" << e << "] ";
		}*/
		//cout << "\n";
		csvData.push_back(move(fields));
	}
	is.close();
	for (auto row : csvData) {
		for (auto column : row) {
			cout << "< " << column << "> ";
		}
		cout << "\n";
	}
}

int main(int argc, char* argv[]) {
	try {
		if (argc != 3)
			throw string(argv[0]) + " needs two arguments , the csv file name , and csv separator character";
		string filename = argv[1];
		char separator = argv[2][0];
		cout << "filename= " << filename << "\n";
		cout << "separator= " << separator << "\n";
		vector<vector<string>> csvData;
		csvRead(filename, separator, csvData);
		printCsv(csvData);
	}
	catch (const string& e) {
		cerr << e << "\n";
	}
}
amesasuarez@matrix:~/OOP345/Milestones/MS1> g++ -o ms1 -std=c++0x csvread.cpp 
amesasuarez@matrix:~/OOP345/Milestones/MS1> ms1 TaskList.dat "|"
filename= TaskList.dat
separator= |
filename= TaskList.dat
separator= |
< Power Supply> < 4> < Motherboard> 
< Motherboard> < 3> < CPU> < Remove CPU> 
< Remove CPU> < 1> < CPU> 
< CPU> < 5> < Memory> < Remove CPU> 
< Remove CPU> < 1> < CPU> 
< Memory> < 4> < SSD> < Remove Memory> 
< Remove Memory> < 1> < Memory> 
< SSD> < 4> < GPU> < Remove SSD> 
< Remove SSD> < 1> < SSD> 
< GPU> < 3> < Test> 
< > 
< Test> < 4> < Approve> < Repair> 
< Repair> 
< Approve> 
< Power Supply> < 4> < Motherboard> 
< Motherboard> < 3> < CPU> < Remove CPU> 
< Remove CPU> < 1> < CPU> 
< CPU> < 5> < Memory> < Remove CPU> 
< Remove CPU> < 1> < CPU> 
< Memory> < 4> < SSD> < Remove Memory> 
< Remove Memory> < 1> < Memory> 
< SSD> < 4> < GPU> < Remove SSD> 
< Remove SSD> < 1> < SSD> 
< GPU> < 3> < Test> 
< > 
< Test> < 4> < Approve> < Repair> 
< Repair> 
< Approve> 
[ Power Supply] [ 4] [ Motherboard] 
[ Motherboard] [ 3] [ CPU] [ Remove CPU] 
[ Remove CPU] [ 1] [ CPU] 
[ CPU] [ 5] [ Memory] [ Remove CPU] 
[ Remove CPU] [ 1] [ CPU] 
[ Memory] [ 4] [ SSD] [ Remove Memory] 
[ Remove Memory] [ 1] [ Memory] 
[ SSD] [ 4] [ GPU] [ Remove SSD] 
[ Remove SSD] [ 1] [ SSD] 
[ GPU] [ 3] [ Test] 
[ ] 
[ Test] [ 4] [ Approve] [ Repair] 
[ Repair] 
[ Approve] 
{ Power Supply}{ 4}{ Motherboard}
{ Motherboard}{ 3}{ CPU}{ Remove CPU}
{ Remove CPU}{ 1}{ CPU}
{ CPU}{ 5}{ Memory}{ Remove CPU}
{ Remove CPU}{ 1}{ CPU}
{ Memory}{ 4}{ SSD}{ Remove Memory}
{ Remove Memory}{ 1}{ Memory}
{ SSD}{ 4}{ GPU}{ Remove SSD}
{ Remove SSD}{ 1}{ SSD}
{ GPU}{ 3}{ Test}
{ }
{ Test}{ 4}{ Approve}{ Repair}
{ Repair}
{ Approve}
amesasuarez@matrix:~/OOP345/Milestones/MS1> exit
exit
Script done on Sat 01 Apr 2017 07:50:20 PM EDT